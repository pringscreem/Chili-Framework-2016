	-Useful Visual Studio tips: F5 to start with Debugger
								arrows to move up/down the list of suggestions in Intellisense
								tab to select the current suggestion from Intellisense
								shift+ctrl+space to bring up the function info from Intellisense
							****ctrl + click to go to the definition or declaration of a function/variable

	-In this particular case, separating logic from the draw call means removing all they keypress checks 
	 from ComposeFrame (and putting them in UpdateModel)

	 -****We can just put a reference object into a class instead of using pointers if we want.****
	  ****	 Reference objects cannot be reassigned (or set to null) the way that pointers can.****

	  //shift + ctrl + space to pull up Intellisense function info

	  ****The abstraction of xMax etc. was much faster to deal with than the actual numbers themselves.

	  ****It doesn't like it when you call library functions during the declaration of a variable (i.e. srand problems)

	  ****Generally speaking, variables are what makes code portable: functions that take variables instead of using their access to
	      class member variables are easier to reuse.

	****The Debugger seems to be a useful way to find the general location of an error so that 
	****you don't have to read the entire source code to find the bug.

	**********Chat-GPT is excellent for syntax questions e.g. How to not overwrite text in output file**********

	*****The semi-colon after classes is a common error (reminder)*****
	*********************************************************************************************
	*********************************************************************************************
	*********************************************************************************************
	*****							Const Correctness										*****
	*****Objects are always passed by reference, otherwise the performance suffers severely.*****
	*****Potential problems with passing by reference are prevented by const correctness.   *****
	*****We use const when we want to save processor time and memory by using references,   *****
	*****but we don't actually want to change the object we are passing.				    *****
	*****																				    *****
	*****	As a consequence of this, we always use const for references 				    *****
	*****				except when we are changing things.								    *****
	*****																				    *****
	*****	When you put the const after the function parameters (just before the 			*****
	*****	semi-colon), it prevents the member function from changing any member variables	*****
	*****	of its' class (it is not a mutator).											*****
	*****																				    *****
	*****																				    *****
	*****																				    *****
	*********************************************************************************************
	*********************************************************************************************
	*********************************************************************************************

***********************************************************************************************************************
***********************************************************************************************************************
***********************************************************************************************************************
*****		In order to fix the linker error (the linker could not find the class .cpp file), I had to manually   *****
*****		add the .h file to the Solution (in the Solution Explorer, under the Solution View), and then also    *****
*****		manually add the .cpp file (Source Files > R-Click > Add > Existing Item > Choose correct file).      *****
*****																											  *****
*****		Add the .h file:																					  *****
*****		"Switch between solutions and avilable view" > ChiliFramework 2016.sln > External Dependencies >	  *****
*****		Find the .h file > R-Click > Include In Project														  *****
*****																											  *****
*****		********** RENAMING FILES CAUSES THE LINKER ERROR TO REAPPEAR **********							  *****
*****																											  *****
***********************************************************************************************************************
***********************************************************************************************************************
***********************************************************************************************************************

static - keyword for making a variable a shared value amongst all instances of the class
	   - we can change them using the class namespace (e.g. Poo::width = 12; vs regular 
		 syntax: poo.width = 12;)

constexpr - keyword to set a value to const at the time of compilation
		  - the value is known at the time of compilation and will never change
		  - constexpr can never change (e.g. "24" every single time the function is called)
		  - const doesn't change for its' lifetime, but can be assigned different values when initialized
			(e.g. "24" the first time the function is called, "12" the second time, etc.)

***** Ctrl + d     - duplicate current line (use alt + arrow to move)

***** You can create a function in the .h file and then R-Click > Quick Refactorings > Create Definition
***** ^There is a button on the opened sub-window that will expand it to a tab (promote to full window)
***** ^It will also provide you with the option to create the .cpp file if you haven't already

***** The collapse option is in the Outlining R-Click menu:
*****	R-Click > Outlining > Collapse Block

*****	Select the part you want to expand/collapse and press Ctrl + M, Ctr + M (i.e. Ctr-M twice)
*****	to toggle the expansion/collapse of the blocks in the selected text

*****	His Notes on For-Loops:
				//Loop Initializer e.g. int x = 100;
				//Loop Control - It has to pass the test in order to execure the code
				//				 e.g. x < 600;
				//Incrementer  - expression that is executed after the loop completes its' current iteration
				//				 e.g. x++
				//All of these are in (or used by/part of) a while-loop, they are just arranged differently.
				for(int x = 100; x < 600; x++)
				{
					gfx.PutPixel(x, 100, 255, 255, 255);
				}
*****

***** If there are any problems with accidental find/replace in other files (e.g. Graphics.h), use his
***** download files to replace the project files and continue.

*************************************************************************************************
*****																						*****
*****				HE HAS US EXTENDING THE GRAPHICS CLASS SO								*****
*****				THAT WE GET USED TO DEALING WITH THE CODEBASE							*****
*****		THIS PREVENTS US FROM DEVELOPING A FEAR OF CHANGING THE CODEBASE					*****
*****																						*****
*************************************************************************************************

***** When you declare a function (.h) but don't define it (.cpp), you will get 
			a Linker error, "Undefined external symbol".

***** As long as you don't try to call an undefined function, 
		it will not be detected by the compiler.

***** Having one master function that is called by all the overloaded functions makes the 
	  code easier to maintain and debug later because the actual work is happening in one place.

***** He recommends avoiding setters/getters for everything because it defeats the purpose of
***** having private variables.
***** Making getters is fine, but setters should only be used when necessary.
***** e.g. poo.x, poo.y, etc. are not needed by anything external, so they don't get a setter
*****
***** Using setters/getters also minimizes maintenance changes
***** e.g. If we switch from x0, x1,... to x0, width,... we only have to change the 
*****	   set/get functions

				**************************************************
				**************************************************
				**********	THE ORDER OF INITIALIZATION **********
				**********	 IS DETERMINED BY THE ORDER **********
				**********	OF DECLARATION IN THE HEADER********** 
				**********			FILE				**********
				**************************************************
				**************************************************
				**************************************************
				**************************************************

***** ^Avoid initializing (in a constructor) with values that are initialized earlier in a class.

***** You can move the definition from the header file to the definition (implementation) file
	  using one of the quick refactoring options.

*************************************************************************************************
*************************************************************************************************
***** Principle of Least Trust: Don't trust anyone not to screw anything up.
		-Encapsulation prevents well-meaning individuals from screwing things up in your code.
		-The number one person you have to protect your code form is yourself:
		 you are going to come back to the code after you have forgotten how you wrote it, 
		 and because you wrote it, you will have a false sense of competency even though 
		 you have forgotten a lot of the details of how you wrote the code.
***** There is such a thing as too much: dogmatically insisting upon Encapsulation absolutely 
	  all of the time will cause gridlock because the code will become so hard to work with.
***** Finding an acceptable balance comes from reading a lot of other people's code and writing 
	  a lot of your own code.
*************************************************************************************************
*************************************************************************************************

***** Try to do whole operation in the member functions so that you don't need setters/getters.

***** The "inline" keyword can cause Linker errors because it allows multiple definitions of 
		the function in different files.
		Removing the "inline" from the Poo constructor fixed the Linker error.

***** The "inline" keyword tells the compiler to try to put the function body everywhere that 
		the function is called.  This can result in multiple function definitions

*************************************************************************************************
***** ^Reset zoom to fit the line above

***** The wiki has notes about some of the gotcha's in the homework, etc.

***** You can declare as many variables as you want in the declaration part of the for-loop syntax:
*****	e.g. for(int i = 0, int myCount = 10, char myChar = ''; i < arrSize; i++)

***** It might be useful to have a function for getting the number of elements in an array.

***** Investigate Later: passing pointers to a function 
						(default deep copy when not passing by reference)
						Is the pointer itself being passed by copy?
						The variable passed in holds the address (which should be the same), but 
						is the actual address of the pointer variable handled in the same manner 
						(deep copy)?

***** To view memory addresses, values, etc.:
*****	Create a breakpoint
*****	When it pauses at the breakpoint, use Debug->Windows->Locals to open the window
*****	The window appears at the bottom, there are several options (Autos, Watch 1, etc.)
*****	Autos - current statement
*****	Locals - current scope
*****	Watch - whichever variables you assign to watch

***** Chat GPT was very helpful for Visual Studio instructions.

***** Add a Breakpoint, start Debugging with F5, and then press F10 to step through the program, 
***** F11 to go deeper into a statement.  Shift + F5 stops the debugging.

***** The Rule of Three/Law of the Big Three, in C++, claims that if a class defines any of the 
***** following three functions, it should define all three:
***** Copy Constructor
***** Copy Assignment Constructor
***** Destructor
*****	This refers to defining the functions instead of using the default functions that the 
*****	compiler creates for you.

***** Watch out for "==" errors.  It might be better to go with just the statement of the bool 
***** in if statements etc. to avoid the error (once you are familiar with the idiosyncrasies of 
***** the syntax it is not as bad to read).


*************************************************************************************************
*************************************************************************************************
*****					One-Use Lockout, On Init Functions:
***** 
***** We can use a private bool to set up one-use functions (Check the bool and then flip it).
***** 
***** Asserts are taken out when you compile in Release instead of Debug mode
***** There are commonly used conventions for compiling code only in the development version.
***** One example is to define a macro and use #define NDEBUG and #ifndef NDEBUG ... #endif
***** 
***** The reason we don't like the Init function without a one-use lockout (with a bool) is that 
***** it break encapsulation by allowing access to the private variables.
***** The one-use lockout fixes this.
***** 
***** Using an Init function creates the risk of creating an uninitialized instance of the class
***** 
***** Vectors will allow us to use the class' Constructor, which negates the need for the 
***** Init workaround and Assert fix for restoring Encapsulation.
*************************************************************************************************
*************************************************************************************************

***** The DrawRect function that he made doesn't clamp to the screen (mine does)

***** Investigate Iterators instead of traditional for-loops.
***** Consider using alternate for-loops.

***** Turned off automatic brace completion (annoying new line added whe typing "{}").

***** Sequential if-statements can be replaced by two conditions in the same if-statement 
***** (this will depend on the particular circumstances).

***** Restarting Visual Studio fixed the error caused by updating the code to the new downloaded 
***** version (wouldn't start before, now it does).

*****		Classes vs Structs
***** Classes default to private.
***** Structs default to public.
***** 
***** Generally:
***** Classes are used for objects with complicated behaviour.
***** Structs are used for objects with no complicated behaviour associated with them.
***** 
***** Other languages (e.g. C#) have structs that cannot have functions.

***** The "Add Class" button/menu is awesome.

***** Ctrl + period to open the Quick Refactoring menu (create definition for functions/classes).

***** He uses 32 asterisks for his "User Variable" and "User Function" dividers in classes.


*****		The "static" Keyword
***** 
***** "static" does different things depending on the context:
*****	Inside a Function - the value is retained between function calls
*****	Global - visible within its' own file
*****	
*****	Inside a Class - belong to the class definition instead of an individual instance
*****				   - variable that is shared by all instances of the class
***** 
*****	Functions in Classes - belong to the class definition
*****						 - can be called without any instances of the class
*****						 - no access to the "this" pointer
***** 
*****	Class within a Function - limits the scope of the created class to inside the function
***** 
*****	Assertions - a type of assertion used to check a condition at compile time

***** "object" and "instance" are equivalent terms

***** "constexpr" is used to evaluate things at compile time, which improves efficiency at 
***** runtime.
***** 
***** Variables - the value of the variable is computed at compile time
***** 
***** Functions - if it only uses const's and constexpr's, the function is computed at compile
*****			  time (e.g. square(3*3), pow(3, 4) )
*****			- there are restrictions on how you can write the function body