August 19, 2023
Project Start
	Actions Taken
	-Started Video 0
	-Downloaded/unzipped framework
	-Put it in the Github folder, uploaded it to Github
	-Put a pixel on the screen ( "gfx.PutPixel()")
	-Left open windows etc at the end of session

August 20, 2023
Video 0
	Actions Taken
	-Restarted video (faster to do this with everything left open from yesterday)
	-Got back to this late in the evening (~2400H) after interruptions
	-Added a .gitignore file
	-Copied a .gitignore file suggested in Stackoverflow
	-Useful Visual Studio tips: F5 to start with Debugger
								arrows to move up/down the list of suggestions in Intellisense
								tab to select the current suggestion from Intellisense
								ctrl+shift+space to bring up the function info from Intellisense

August 21, 2023
Video 1
	Actions Taken
	-Woke late, started after shower and late breakfast
	-Double while-loop to put a pixel grid on the screen (every 100 pixels)
	-Converted pixel grid loop to 48 iterations instead of 480,000 (800x600)
		^This was done by using "counter += 100" instead of "counter++"
	-Converted reticle to take x and y centre coordinates
	-There is no single guiding principle governing the use of semicolons in C++:
		https://web.archive.org/web/20100906085102/http://cpptalk.net/confused-about-the-meaning-of-the-semicolon-vt11965.html
		https://stackoverflow.com/questions/785686/semicolon-after-class-declaration-braces
August 21, 2023
Video 2
	Actions Taken
	-See Video 1 notes above

August 21, 2023
Video 3
	Actions Taken
	-Lined up parameters for easier editing (use of whitespace for easier editing)
	-Basic keyboard input (i.e. "  wnd.kbd.KeyIsPressed(/*virtual keycode*/)  ")
	-Colour changes
	-Cursor change

August 22, 2023
Video 4.1
	Actions Taken
	-Made cursor keep position instead of popping back to centre by moving x, y, r, g, b variables to global scope
	-Reduced movement from 100 to 3 pixels

August 23, 2023
Video 4.1
	Actions Taken
	-Restarted video
	-Stepped through program with Debugger

August 23, 2023
Video 4.2
	Actions Taken
	-Created a mouse cursor that checks to make sure the mouse is in the window and moves to match mouse position

August 24, 2023
Video 4.2
	Actions Taken
	-Resume from ~14:00
	-Moved mouse cursor code into Removed Code.cc
	-Moved cursor x,y,r,g,b into the Game class in Game.h (User Variables section at the bottom)

August 24, 2023
Video 4.3
	Actions Taken
	-Moved logic into UpdateModel

August 25, 2023
Video 5
	Actions Taken
	-Screen boundary checks fixed
	-Value checks for colour change

August 26, 2023
Video 6
	Actions Taken
	-Created a second box and created a collision check to test if boxes overlap
	-Moved screen boundary checks into a function
	-Renaming, some refactoring

August 26, 2023
Video 7
	Actions Taken
	-Debugger demo

August 30, 2023
Video 8
	Actions Taken
	-Debugger practice homework from Video 7
	-Implemented Pong with member functions and member variables

September 13, 2023
Video 9
	Actions Taken
	-Wrote Pong
	-Started playing with Bitmap Tool

May 9, 2024
Refresher
	-Added function to write output to a text file
	-Fixed output function to not overwrite previously written text in output file

May 10, 2024
	Video 8, Video 8 Homework
	-Start moving things into classes
	-Bumped into linker error

May 11, 2024
	Video 9, Video 9 Homework
	-Fixed linker error (have to manually add files to the "Solution" that Visual Studio uses -- See Notes)
	-More moving into classes
	-"static" keyword (share amongst all class instances)
	-"constexpr" keyword (only initialize at compilation and never change)

	Video 10, Video 10 Homework
	-Clear Game.h and Game.cpp (saved in Removed Code/Poo Game)
	-Tried to put the rectangle in its' own class, but it has too many dependencies 
	 (keyboard, window, graphics)
	-Used the centre of the rectangle as the reference point instead of the top left corner
	-Renaming files causes the linker error to reappear
	-He did the homework without making a rectangle class

	Video 11
	-Created a DrawRect function in the Graphics class
	-My CheckRectangleKeys still worked for his version
	-Modified my clamp function for his version (HisClampRectToScreen)
	-Using Color class now
	-HisCheckRetangleKeys
	Left Off At 7:00

May 12, 2024
	Video 11, Video 11 Homework
	-Set mouse click to drag the bottom right corner of the rectangle around
	-The problem with this is that the rectangle doesn't render if the corner
	 is above/left of the stationary corner
	-The naive solution is to use if statements to test for the quadrant
	-Can get away with three if statements and assume the fourth
	-His solution is to swap the points if the other point is out of position (top/bot/left/right)
	-This works because we are not using references (the value has been copied for the scope)
	-He creates a helper function to swap the points, which requires references to work
	-This creates an example to juxtapose references (helper function) and regular variables 
	 (drawing the rectangle with copied variables)
	-He is also demonstrating the debugger
	-Wrote a text file writing function for output
	-There is another version of a text file output function that I 
	 wrote in Removed Code/Game.cpp
	-The output file is in:
 	 C:\msys64\home\ssonn\GitHub2023\Chili-Framework-2016\Debug
	-He removes the TestAndSwap function and replaces it with the Standard Library method
	-Back to the Poo Game
	-Const Correctness: const on references unless necessary
						const after functions that should not change class variables
	**Move Draw function into Dude class
	**Write a DrawRectangle function that uses a single point and width/height (already done)

May 16, 2024
	Video 11 Homework
	-Dude.Draw written
	-MyRectangle class uses a centre point and width/height variables
	-He does the height/width rectangle differently: he makes a wrapper that uses the 
	 point and height/width to calculate the necessary values and call the original 
	 DrawRect function
	-He also defines the function in the header file instead of the definition file
	-Having the overloaded function adapt and call the other one reduces the amount 
	 of maintenance

May 17, 2024
	Video 12, Video 12 Homework
	-Encapsulation (making all the data private and creating setter/getter functions)
	-He also plans to do constructors and initialization
	-The order of variable initialization in the constructor is actually the order in the
	 class definition (in the header file)
	-Discussion of how to use Encapsulation properly:
		Try to put all the required operations in member functions
		Prefer just Getters, avoid Setters
		Don't be dogmatic about it
	-Also:
		Encapsulation keeps the channels between each part stable so that you only have to change
			one part at a time
		It keeps the "spaghetti" inside each part's "box" so that the overall design isn't as 
			difficult to work with
	** Change the Dude class so that it uses Encapsulation
			Added setters/getters for x and y
			The alternative is to pass the keyboard input into the class
			Passing the input would require adding the keyboard library or four input variables
	** Change the number of Poo objects to 9
	-The initialization of an array in a constructor is tricky.
	-He includes the keyboard in the Dude class and uses it in an Update function

May 24, 2024
	Video 12 Homework
	-Forgot to change the game over condition (hardcoded to three poos)

May 31, 2024
	Video 12 Homework
	-Updated the game over condition 
	-Moving the keyboard checks into the Dude class requires passing the MainWindow instance 
	 from the Game class (see how he does it...) ===> He doesn't have to pass the window, just 
													  a reference to the keyboard (it gets the 
													  instance of the keyboard when it is called 
													  in Game, and the keyboard is a member of 
													  the window)
	-He does the change in number of Poos the easy way (copy/paste more of the same)

June 1, 2024
	Video 13
	-Array demo
	-Swap Poo class to an array of Poos
	-Change the Poo Constructor to an Init function with a check (one-time initialization)
	** Change the objective of the game from collecting the poo to avoiding the poo
	** Change the goal to reaching the red square
	** Draw the Game Over graphic on top of everything else
	** Extra Challenge: Make the square cycle between white and red
	**					Add a graphic to the top left that lengthens when you collect the 
	**					red squares

June 2, 2024
	Video 13 Homework
	-My solution was to copy the Poo class and rename it to Goal, then adjust e.g. velocity = 0
	-Make a Game Over function to freeze everything in place

June 5, 2024
	Video 13 Homework
	-Make the Game Over screen freeze -> Wrap everything in an if statement for the game 
										 over condition?
	-He refactors Poo -> Changes the ProcessConsumption function and makes changes to adapt.
					  -> My version made no changes to Poo and minimal changes to Game.
					  -> I could name my bool better (start with "is" instead of putting it in 
						 the middle of the name).
					  -> He made a Goal class as well.
					  -> He wrote his Goal class from scratch.
					  -> He copies some stuff from Poo.
					  -> I used a pointer and just re-instantiated the Goal on the Heap, but 
						 he has not covered pointers yet, so he makes a Respawn function.
					  -> He also uses a bool for solving the colour pulsing problem.
					  -> He created a Meter class for illustrating number of goals collected.

June 7, 2024
	Video 14a
	-Continue

June 14, 2024
	Video 14a
	-Continue

June 15, 2024
	Video 14b
	-Completed basic Snake setup
	-Still needs a Snake rendered on the Board, keyboard input, and initialization of new 
	 Segments:
	 Board: pick a start location (set in constructor) and a starting direction (delta_loc)
	 Keyboard Input: same as before, change delta_loc to reflect input
	 Initialization of New Segments: set the loc to just behind the last Segment and c to 
									 bodyColor

June 18, 2024
	Life Extension
	-Continue (add some functions)
	
June 19, 2024
	Life Extension
	-Continue
	-Changed the "Edit.InsertNextMatchingCaret" shortcut to Ctrl + Alt + F (for "find", 
	 because it is a different type of find/replace action).
	-LifeFlipPosition--This changes the value in the LifeBoard (two-dimensional vector).......
	-Set spacebar to the Flip Position key.
	-LifeDrawBoard--This draws all of the squares that have flipped values in the LifeBoard.
	-Can cause a "vector subscript out of range" error by holding down an arrow key and pressing 
	 spacebar to flip the position (tries to access the next value e.g. -1).
	-Sometimes the spacebar does not cause the position to flip (doesn't turn green).
	-Seems like the position flip is laggy.

June 20, 2024
	Life Extension
	-FlipPosition sometimes doesn't work on a square when holding spacebar and an arrow key.
	-Fixed the vector out of bounds bug by moving the clamp ahead of the assignment (the flip).
	-FlipPosition sometimes doesn't work when the spacebar is pressed.
	-It is letting you create diagonal lines that are not connected, i.e. like a bishop.
	-It looks like the problem is that the check is happening so fast that it is actually being 
	 carried out many times with each key press, making the position oscillate between on and
	 off.  The effect is that it's pretty random whether it is on or off when you release the 
	 key, because it only has two possible outcomes and it is flipping back and forth every time 
	 the engine goes through an update cycle.
	-The solution is to put in a check to see if the key was pressed recently and set a timer if 
	 it was.
	-This might also be the reason that the ball would sometimes pass through the paddles in Pong.
	-The engine seems to run at 60hz.
	-Wrote a blue/black flash to show the framerate visually.
	-It would be better to just write a timer and test how long a frame takes (put the output in
	 the text file).
	-The simple example in Chat GPT worked (700 nanoseconds to do nothing).
	-The test is not working properly yet (need to get it to test a single frame).

June 21, 2024
	Life Extension
	-Started frame time output to text file

June 22, 2024
	Life Extension
	-Completed frame time output to text file
	-[Post Note: Frames took an average of about 20ms, except the first frame, which took about 43ms]

June 23, 2024
	Life Extension
	-Continue

June 27, 2024
	Life Extension
	-Finished LifeCellShouldLive
	-Next steps: 
		Add a pause button that still lets you move the cursor and edit position values
		Slow the cursor down so you you can move it more precisely
	-Weird bugs happening (rules not being applied properly yet).

June 28, 2024
	Life Extension
	-Same bug: starts normally and then most of the screen switches to "alive"
	-Pause is working: the bug must be in the cell checking functions.